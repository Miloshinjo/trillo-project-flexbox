//////////////////////////////////////////////////
// LOGO
.logo {
    height: 3.25rem;
    margin-left: 2rem;
}


/////////////////////////////////////////////////
// SEARCH
.search {
    flex: 0 0 40%; // this is for the width of the searchbox. we use flex-basis property. so flex: flex grow(0), flex shrink(0), flex-basis (40%), which is the 40% of the total width. Shrink can be 0 or 1 (0 doesn't allow it to shrink)
    display: flex; // flex item here is the flex container (nexted flexbox)
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-smallest) {
        order: 1;
        flex: 0 0 100%;
        background-color: var(--color-grey-light-2);
    }

    &__input {
        font-family: inherit; // font-family on an input field is not inherited from the global document.
        font-size: inherit; // same thing for the font size.
        color: inherit; // same thing for the text color.
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        border-radius: 100px; // high number so it has rounded edges.
        width: 90%; // we are not giving it 100% cause we want to expand it when we click it (focus effect below)
        transition: all .2s;
        margin-right: -3.5rem; // this way the button will move on top of the input.


        &:focus {
            width: 100%;
            outline: none;
            background-color: var(--color-grey-light-3);
        }

        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var (--color-grey-light-4);
        }
    }

    &__input:focus + &__button {
        background-color: var(--color-grey-light-3);
    } // when input is focused, we selected the adjecent element to change, in this case, button

    &__button {
        border: none;
        background-color: var(--color-grey-light-2);  //same as input

            &:focus {
                outline: none;
            }

            &:active {
                transform: translateY(2px);
            }
    }

    &__icon { // we format SVG icons only by setting it's height and width.
        height: 2rem;
        width: 2rem;
        fill: var(--color-grey-dark-3); // fill is used to change the color of the icons.
    }
}


//////////////////////////////////////////////////
// USER NAVIGATION

.user-nav {

    align-self: stretch; // this overwrites the align-items with align self, that will strech all the way from top to bottom in the nav.

    display: flex;
    align-items: center;

    & > * { // this selects the user nav and all the direct children. (icon-box, user)
        padding: 0 2rem;
        cursor: pointer;
        height: 100%; // so that hovering effect has full power.
        display: flex; // centering the icons and the user.
        align-items: center; // centering the icons and the user.
    }

    & > *:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        position: relative;
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2); // color for SVG icons
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;
        position: absolute;
        top: 1.5rem;
        right: 1rem;

        display: flex; // display: flex works on text too.
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

}

//////////////////////////////////////////////////
// SIDE NAVIGATION

.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;



    @media only screen and (max-width: $bp-medium) {
        display: flex;
        margin: 0;
     }

    &__item {
        position: relative;


        &:not(:last-child) { // everything will be selected except the last item
            margin-bottom: .5rem;

            @media only screen and (max-width: $bp-medium) {
                margin-bottom: 0;
            }
        }

        @media only screen and (max-width: $bp-medium) {
            flex: 1;
        }
    }

    &__item::before { // this is the little animation effect that will happen on hover. This should be visible only when we hover.
        content: ""; // every before/after pseudo element has to have this option.
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0); // scale Y only happens from top to bottom.
        // transform-origin: bottom; // sets where the scaling starts.
        // not all this time, cause we wanna add more elements later. this is with a delay. during first .2 secs, the transform happens, and then the delay kicks in. cubic bezier for a nice effect.
        transition: transform .2s, 
                    width .4s cubic-bezier(1,0,0,1) .2s, 
                    background-color .1s;
    }

    &__item:hover::before,
    &__item--active::before { // to pick the default active item on the nav.
        transform: scaleY(1); // it has to be 0 in the normal state.
        width: 100%; // this will enable it to expand to the side. we need to add a delay to the with or it will look horrible.
    }

    &__item:active::before {
        background-color: var(--color-primary-light);
    }



    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;
        position: relative; // z-index only works if we have position set.
        z-index: 10;

        display: flex; // for centering items inside. (doesn't matter if it's used with display: block)
        align-items: center;

        @media only screen and (max-width: $bp-medium) {
            justify-content: center;
            padding: 2rem;
        }

        @media only screen and (max-width: $bp-small) {
            flex-direction: column;
            padding: 1.5rem .5rem;
        }
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        fill: currentColor; // this is the color of the current element or the parent element. it's well supported by many browsers.

        @media only screen and (max-width: $bp-small) {
            width: 1.5rem;
            height: 1.5rem;
            margin-right: 0;
            margin-bottom: .7rem;
        }
    }
}

//////////////////////////////////////////////////
// LEGAL TEXT

.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;

    @media only screen and (max-width: $bp-medium) {
       display: none;
     }
}


/////////////////////////////////////////////////////
// GALLERY

.gallery {
    display: flex;

    &__photo { // images width and hight have to be defined in percentages cause of responsive design
        width: 100%;
        display: block; // image should always be a block or inline-block if we don't want white space.
    }
}

/////////////////////////////////////////////////////
// Hotel Overview

.overview {
    display: flex;
    align-items: center;
    border-bottom: var(--line);


    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem;

        @media only screen and (max-width: $bp-small) {
           font-size: 1.8rem;
           padding: 1.25rem 2rem;
        }
    }
    &__stars {
        margin-right: auto; // this is a good trick in flexbox, we make the element as long as it's content.
        display: flex; // so all icon star elements align perfectly
    }

    &__icon-star,
    &__icon-location {
        width: 1.75rem;
        height: 1.75rem;
        fill: var(--color-primary)
    }

    &__location {
        font-size: 1.2rem;
        display: flex;
        vertical-align: center;
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__rating {
        background-color: var(--color-primary);
        margin-left: 3rem;
        color: #fff;
        padding: 0 2.25rem;
        align-self: stretch;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;

        @media only screen and (max-width: $bp-small) {
            padding: 0 1.5rem;
         }
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px;

        @media only screen and (max-width: $bp-small) {
            font-size: 1.8rem;
         }
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small) {
            font-size: .5rem;
         }
    }

}

/////////////////////////////////////////////////////
// BUTTON INLINE

.btn-inline {
    border: none;
    color: var(--color-primary);
    font-size: inherit;
    border-bottom: 1px solid currentColor;
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent;
    cursor: pointer;
    transition: all .2s;

    & span {
        margin-left: 3px;
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1);

        span {
            margin-left: 8px;
        }
    }


    &:focus {
        outline: none;
        animation: pulsate 1s infinite;
    }
}

@keyframes pulsate {
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,.25);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

/////////////////////////////////////////////////////
// PARAGRAPH

.paragraph:not(:last-of-type) {
    margin-bottom: 2rem;
}



/////////////////////////////////////////////////////
// LIST
.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    flex-wrap: wrap;

    &__item {
        flex: 0 0 50%; // giving them fixed width with flex property.
        margin-bottom: .7rem;
    }
    // single icon is much easier to use in CSS. SVG in CSS. best used in the ::before pseudo-element
    &__item::before {
        content: "";
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;


        // Older browsers
        //background-image: url(../img/SVG/chevron-thin-right.svg);
        //background-size: cover;

        //Newer browsers - we use masks for coloring the icon.
        background-color: var(--color-primary);
        -webkit-mask-image: url(../img/SVG/chevron-thin-right.svg);
        -webkit-mask-size: cover;
        mask-image: url(../img/SVG/chevron-thin-right.svg);
        mask-size: cover;
    }
}



/////////////////////////////////////////////////////
// RECOMMEND

.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;

    align-items: center;

    &__count {
        margin-right: auto;
    }

    &__friends {
        display: flex;
    }
    &__photo {
        box-sizing: content-box; // adding border on top of the height and width
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        border: 3px solid #fff;

        &:not(:last-child) {
            margin-right: -2rem;
        }
    }
}


/////////////////////////////////////////////////////
// REVIEWS
.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    position: relative;
    overflow: hidden;

    @media only screen and (max-width: $bp-medium) {
        padding: 2rem;
        margin-bottom: 3rem;
    }

    &__text {
        margin-bottom: 2rem;
        z-index: 10;
        position: relative;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

    &__user {
        display: flex;
        align-items: center;
        margin-top: 2rem;
    }
    &__user-box {
        display: flex;
        flex-direction: column;
        margin-right: auto;
    }

    &__user-name {
        text-transform: uppercase;
        font-weight: 600;
    }

    &__user-date {
        font-size: 1rem;
        color: var(--color-grey-dark-3);
    }

    &__rating {
        color: var(--color-primary);
        font-size: 2.5rem;
    }
// quotation mark 
    &::before {
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1;
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif;
        z-index: 1;
    }

}

/////////////////////////////////////////////////////
// CALL TO ACTION

.cta {
    padding: 3.5rem 0;
    text-align: center;

    @media only screen and (max-width: $bp-medium) {
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 2rem;
        text-transform: uppercase;
        font-weight: 300;
        margin-bottom: 2.5rem;
    }
}

.btn {
    font-size: 1.5rem;
    border: none;
    font-weight: 300;
    text-transform: uppercase;
    border-radius: 100px;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;
    position: relative;
    overflow: hidden;

    & > * {
        display: inline-block;
        height: 100%;
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 2rem 7.5rem;
    }

    &__invisible {
        position: absolute;
        left: 0;
        top: -100%;
        padding: 2rem 0;
    }

    &:hover {
        background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
        cursor: pointer;
    }
    &:hover &__visible {
        transform: translateY(100%);
    }

    &:hover &__invisible {
        top: 0;
     }

     &:focus {
         outline: none;
         animation: pulsate 1s infinite;
     }

}